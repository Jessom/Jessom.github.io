{"meta":{"title":"わタしの ブログ","subtitle":"watasi的博客","description":"个人博客","author":"わタし","url":"http://watasi.cn"},"pages":[{"title":"我的项目","date":"2017-07-29T06:01:22.372Z","updated":"2017-07-29T06:01:22.372Z","comments":false,"path":"categories/index.html","permalink":"http://watasi.cn/categories/index.html","excerpt":"","text":""},{"title":"我的标签","date":"2017-07-29T06:00:40.448Z","updated":"2017-07-29T06:00:40.448Z","comments":false,"path":"tags/index.html","permalink":"http://watasi.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"使用Android Studio开发MUI插件入坑指南","slug":"使用Android Studio开发MUI插件入坑指南","date":"2017-08-11T10:15:43.597Z","updated":"2017-08-11T10:55:08.097Z","comments":true,"path":"2017/08/11/使用Android Studio开发MUI插件入坑指南/","link":"","permalink":"http://watasi.cn/2017/08/11/使用Android Studio开发MUI插件入坑指南/","excerpt":"","text":"写在前面，该入坑指南是以Mob发送短信验证码为例，实现MUI第三方插件的开发，仅供参考。 123 HTML5+ 基座扩展采用三层结构，JS层、PluginBridge层和Native层。 三层功能分别是：JS层： 在Webview页面调用，触发Native层代码，获取执行结果。PluginBridge层： 将JS层请求进行处理，触发Native层扩展插件代码。Native层： 插件扩展的平台原生代码，负责执行业务逻辑并执行结果返回到请求页面。 1. 预备环境 AndroidStudio开发环境,要求安装Android4.0或以上（API 14）SDK 下载HBuilder离线打包Android版SDK（5+SDK下载） 1.1 离线SDK目录结构123456|-HBuilder-Hello // 离线打包演示应用|-HBuilder-Integrate // 5+ SDK 集成和插件开发示例|-SDK // SDK库文件目录|-Feature-Android.xls // Android平台各扩展Feature API对应的permission|-readme.txt // 版本说明文件|-重要提示.txt 2. 配置编译工程使用Android Studio创建一个新的Android项目 2.1 导入jar包 SDK/libs/目录中选择需要导入的jar包，导入到工程目录的libs下。根据官方文档，至少需要添加12345pdr.jarui.jarnineoldandroids-2.4.0.jarmy-imageloader.jarmy-nineoldandroids-2.4.0.jar 在SDK/libs目录下并没有找到nineoldandroids-2.4.0.jar，所以并没有导入nineoldandroids-2.4.0.jar。 这里贴出我导入的jar包1234567891011// MobMobCommons-2017.0607.1736.jarMobTools-2017.0607.1736.jarSMSSDK-3.0.0.aarSMSSDKGUI-3.0.0.aar// MUImy-imageloader.jarmy-nineoldandroids-2.4.0.jarpdr.jarui.jar 添加成功后选中libs目录里的库文件，鼠标右键打开菜单，选择“Add As Library…”将填加到工程内的jar文件链接到工程里 2.2 添加资源到工程中 打开工程目录的res文件夹，删除目录下已有的目录 拷贝SDK/res目录下的全部目录到工程的res目录下 在app-&gt;src-&gt;main目录下添加assets目录 拷贝SDK/assets/目录下的data目录和res目录到工程的目录下 3. 修改原生工程的Androidmanifest.xml文件3.1 修改application节点 修改android:icon属性值为@drawable/icon 删除android:theme属性 删除allowBackup属性 添加android:largeHeap=”true” 添加 android:name=”io.dcloud.application.DCloudApplication” 添加android:allowClearUserData=”true” 注意： 点击这里查看io.watasi.EntryActivity12345678910111213141516171819202122232425262728293031323334353637&lt;application android:allowClearUserData=&quot;true&quot; android:icon=&quot;@drawable/icon&quot; android:label=&quot;@string/app_name&quot; android:largeHeap=&quot;true&quot; android:name=&quot;com.mob.MobApplication&quot;&gt; &lt;activity android:name=&quot;io.watasi.EntryActivity&quot; android:configChanges=&quot;orientation|keyboardHidden|keyboard|navigation&quot; android:label=&quot;@string/app_name&quot; android:launchMode=&quot;singleTask&quot; android:hardwareAccelerated=&quot;true&quot; android:theme=&quot;@style/TranslucentTheme&quot; android:screenOrientation=&quot;user&quot; android:windowSoftInputMode=&quot;adjustResize&quot; &gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt; &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;activity android:name=&quot;com.mob.tools.MobUIShell&quot; android:theme=&quot;@android:style/Theme.Translucent.NoTitleBar&quot; android:configChanges=&quot;keyboardHidden|orientation|screenSize&quot; android:windowSoftInputMode=&quot;stateHidden|adjustResize&quot;/&gt; &lt;meta-data android:name=&quot;Mob-AppKey&quot; android:value=&quot;f8be3fe06a28&quot;/&gt; &lt;meta-data android:name=&quot;Mob-AppSecret&quot; android:value=&quot;d8add527dce9a9ba67cb8003ca49b937&quot;/&gt; &lt;service android:name=&quot;io.dcloud.common.adapter.io.MiniServerService&quot; android:exported=&quot;true&quot; /&gt; &lt;/application&gt; 3.2 添加文件支持的屏幕旋转方向123456&lt;supports-screens android:anyDensity=&quot;true&quot; android:largeScreens=&quot;true&quot; android:normalScreens=&quot;true&quot; android:resizeable=&quot;true&quot; android:smallScreens=&quot;true&quot; /&gt; 3.3 添加最低支持系统版本12&lt;!--5 sdk支持的最低系统版本为8--&gt;&lt;uses-sdk android:minSdkVersion=&quot;8&quot; /&gt; 3.4 添加5+SDK必需引用的系统权限123456&lt;!-- HBuilder Runtime 基础权限 begin --&gt;&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot;/&gt;&lt;uses-permission android:name=&quot;android.permission.GET_TASKS&quot; /&gt;&lt;!-- Html5Plus runtime基础权限 end --&gt; 3.5 添加Mob必须的系统权限123456&lt;uses-permission android:name=&quot;android.permission.READ_CONTACTS&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.RECEIVE_SMS&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.READ_SMS&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt; 3.6 贴出整个Androidmanifest.xml文件 android:versionCode与mainfest.json下的version-&gt;code一致 android:versionName与mainfest.json下的version-&gt;name一致1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071&lt;!--package=&quot;com.hyxk.ggmall.personal&quot;--&gt;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:versionCode=&quot;83&quot; // 注意阅读上面 android:versionName=&quot;1.0.0&quot; // 注意阅读上面 package=&quot;com.infozx.yaoqingba&quot;&gt; &lt;supports-screens android:anyDensity=&quot;true&quot; android:largeScreens=&quot;true&quot; android:normalScreens=&quot;true&quot; android:resizeable=&quot;true&quot; android:smallScreens=&quot;true&quot; /&gt; &lt;uses-sdk android:minSdkVersion=&quot;8&quot; /&gt; &lt;!-- HBuilder Runtime 基础权限 begin --&gt; &lt;!-- 联网 --&gt; &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt; &lt;!-- 使用存储卡 --&gt; &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt; &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.GET_TASKS&quot; /&gt; &lt;!-- Html5Plus runtime基础权限 end --&gt; &lt;uses-permission android:name=&quot;android.permission.READ_CONTACTS&quot; /&gt; &lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt; &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt; &lt;uses-permission android:name=&quot;android.permission.RECEIVE_SMS&quot; /&gt; &lt;uses-permission android:name=&quot;android.permission.READ_SMS&quot; /&gt; &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt; &lt;application android:allowClearUserData=&quot;true&quot; android:icon=&quot;@drawable/icon&quot; android:label=&quot;@string/app_name&quot; android:largeHeap=&quot;true&quot; android:name=&quot;com.mob.MobApplication&quot;&gt; &lt;activity android:name=&quot;io.watasi.EntryActivity&quot; android:configChanges=&quot;orientation|keyboardHidden|keyboard|navigation&quot; android:label=&quot;@string/app_name&quot; android:launchMode=&quot;singleTask&quot; android:hardwareAccelerated=&quot;true&quot; android:theme=&quot;@style/TranslucentTheme&quot; android:screenOrientation=&quot;user&quot; android:windowSoftInputMode=&quot;adjustResize&quot; &gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt; &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;activity android:name=&quot;com.mob.tools.MobUIShell&quot; android:theme=&quot;@android:style/Theme.Translucent.NoTitleBar&quot; android:configChanges=&quot;keyboardHidden|orientation|screenSize&quot; android:windowSoftInputMode=&quot;stateHidden|adjustResize&quot;/&gt; &lt;!--配置Mob--&gt; &lt;meta-data android:name=&quot;Mob-AppKey&quot; android:value=&quot;你的KEY&quot;/&gt; &lt;meta-data android:name=&quot;Mob-AppSecret&quot; android:value=&quot;你的Secret&quot;/&gt; &lt;service android:name=&quot;io.dcloud.common.adapter.io.MiniServerService&quot; android:exported=&quot;true&quot; /&gt; &lt;/application&gt;&lt;/manifest&gt; 4. 修改工程源码4.1 EntryActivity这里贴上整个activity的源码，其中有部分地方需要修改将appBasePath变量改为/apps/mainfest.json下的idpackage io.watasi;import android.app.Activity;import android.content.Context;import android.content.Intent;import android.content.res.Configuration;import android.os.Bundle;import android.view.KeyEvent;import android.view.Menu;import android.view.View;import android.view.ViewGroup;import android.view.Window;import android.widget.FrameLayout;import io.dcloud.EntryProxy;import io.dcloud.RInformation;import io.dcloud.common.DHInterface.IApp;import io.dcloud.common.DHInterface.ICore;import io.dcloud.common.DHInterface.IOnCreateSplashView;import io.dcloud.common.DHInterface.ISysEventListener;import io.dcloud.common.DHInterface.IWebview;import io.dcloud.common.DHInterface.IWebviewStateListener;import io.dcloud.feature.internal.sdk.SDK;public class EntryActivity extends Activity &#123; boolean doHardAcc = true; EntryProxy mEntryProxy = null; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); requestWindowFeature(Window.FEATURE_NO_TITLE); if (mEntryProxy == null) &#123; FrameLayout f = new FrameLayout(this); // 创建5+内核运行事件监听 WebappModeListener wm = new WebappModeListener(this, f); // 初始化5+内核 mEntryProxy = EntryProxy.init(this, wm); // 启动5+内核 mEntryProxy.onCreate(this, savedInstanceState, SDK.IntegratedMode.WEBAPP, null); setContentView(f); &#125; &#125; @Override public boolean onCreateOptionsMenu(Menu menu) &#123; return mEntryProxy.onActivityExecute(this, ISysEventListener.SysEventType.onCreateOptionMenu, menu); &#125; @Override public void onPause() &#123; super.onPause(); mEntryProxy.onPause(this); &#125; @Override public void onResume() &#123; super.onResume(); mEntryProxy.onResume(this); &#125; public void onNewIntent(Intent intent) &#123; super.onNewIntent(intent); if (intent.getFlags() != 0x10600000) &#123;// 非点击icon调用activity时才调用newintent事件 mEntryProxy.onNewIntent(this, intent); &#125; &#125; @Override protected void onDestroy() &#123; super.onDestroy(); mEntryProxy.onStop(this); &#125; @Override public boolean onKeyDown(int keyCode, KeyEvent event) &#123; boolean _ret = mEntryProxy.onActivityExecute(this, ISysEventListener.SysEventType.onKeyDown, new Object[] &#123; keyCode, event &#125;); return _ret ? _ret : super.onKeyDown(keyCode, event); &#125; @Override public boolean onKeyUp(int keyCode, KeyEvent event) &#123; boolean _ret = mEntryProxy.onActivityExecute(this, ISysEventListener.SysEventType.onKeyUp, new Object[] &#123; keyCode, event &#125;); return _ret ? _ret : super.onKeyUp(keyCode, event); &#125; @Override public boolean onKeyLongPress(int keyCode, KeyEvent event) &#123; boolean _ret = mEntryProxy.onActivityExecute(this, ISysEventListener.SysEventType.onKeyLongPress, new Object[] &#123; keyCode, event &#125;); return _ret ? _ret : super.onKeyLongPress(keyCode, event); &#125; public void onConfigurationChanged(Configuration newConfig) &#123; try &#123; int temp = this.getResources().getConfiguration().orientation; if (mEntryProxy != null) &#123; mEntryProxy.onConfigurationChanged(this, temp); &#125; super.onConfigurationChanged(newConfig); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123; mEntryProxy.onActivityExecute(this, ISysEventListener.SysEventType.onActivityResult, new Object[] &#123; requestCode, resultCode, data &#125;); &#125;&#125;class WebappModeListener implements ICore.ICoreStatusListener, IOnCreateSplashView &#123; Activity activity; View splashView = null; ViewGroup rootView; IApp app = null; public WebappModeListener(Activity activity, ViewGroup rootView) &#123; this.activity = activity; this.rootView = rootView; &#125; /** * 5+内核初始化完成时触发 * */ @Override public void onCoreInitEnd(ICore coreHandler) &#123; // 表示Webapp的路径在 file:///android_asset/apps/HelloH5 String appBasePath = \"/apps/H5512A60A\"; // 设置启动参数,可在页面中通过plus.runtime.arguments;方法获取到传入的参数 String args = \"&#123;url:'http://www.baidu.com'&#125;\"; // 启动启动独立应用的5+ Webapp app = SDK.startWebApp(activity, appBasePath, args, new IWebviewStateListener() &#123; // 设置Webview事件监听，可在监监听内获取WebIvew加载内容的进度 @Override public Object onCallBack(int pType, Object pArgs) &#123; switch (pType) &#123; case IWebviewStateListener.ON_WEBVIEW_READY: // WebApp准备加载事件 // 准备完毕之后添加webview到显示父View中， // 设置排版不显示状态，避免显示webview时html内容排版错乱问题 View view = ((IWebview) pArgs).obtainApp().obtainWebAppRootView().obtainMainView(); view.setVisibility(View.INVISIBLE); if(view.getParent() != null)&#123; ((ViewGroup)view.getParent()).removeView(view); &#125; rootView.addView(view, 0); break; case IWebviewStateListener.ON_PAGE_STARTED: // 首页面开始加载事件 break; case IWebviewStateListener.ON_PROGRESS_CHANGED: // WebApp首页面加载进度变化事件 break; case IWebviewStateListener.ON_PAGE_FINISHED: // WebApp首页面加载完成事件 // 页面加载完毕，设置显示webview // 如果不需要显示spalsh页面将此行代码移动至onCloseSplash事件内 app.obtainWebAppRootView().obtainMainView().setVisibility(View.VISIBLE); break; &#125; return null; &#125; &#125;, this); app.setIAppStatusListener(new IApp.IAppStatusListener() &#123; // 设置APP运行事件监听 @Override public boolean onStop() &#123; // 应用运行停止时调用 rootView.removeView(app.obtainWebAppRootView().obtainMainView()); // TODO Auto-generated method stub return false; &#125; @Override public void onStart() &#123; // 独立应用启动时触发事件 &#125; @Override public void onPause(IApp arg0, IApp arg1) &#123; // WebApp暂停运行时触发事件 &#125; @Override public String onStoped(boolean arg0, String arg1) &#123; // TODO Auto-generated method stub return null; &#125; &#125;); &#125; @Override public void onCoreReady(ICore coreHandler) &#123; // 初始化5+ SDK， // 5+SDK的其他接口需要在SDK初始化后才能調用 SDK.initSDK(coreHandler); // 设置当前应用可使用的5+ API SDK.requestAllFeature(); &#125; @Override public boolean onCoreStop() &#123; // 当返回false时候回关闭activity return false; &#125; // 在Widget集成时如果不需要显示splash页面可按照如下步骤操作 // 1 删除onCreateSplash方法内的代码 // 2 将5+mainView添加到rootview时将页面设置为不可见 // 3 在onCloseSplash方法中将5+mainView设置为可见 // 4 修改androidmanifest.xml文件 将SDK_WebApp的主题设置为透明 // 注意！ // 如果不显示splash页面会造成用户点击后页面短时间内会没有变化， // 可能会给用户造成程序没响应的错觉， // 所以开发者需要对5+内核启动到5+应用页面显示之间的这段事件进行处理 @Override public Object onCreateSplash(Context pContextWrapper) &#123; splashView = new FrameLayout(activity); splashView.setBackgroundResource(RInformation.DRAWABLE_SPLASH); rootView.addView(splashView); return null; &#125; @Override public void onCloseSplash() &#123; rootView.removeView(splashView); &#125;&#125; 4.2 在java目录下添加io.dcloud包4.3 拷贝SDK\\src\\io\\dcloud\\Rinfomation.java文件到工程的io.dcloud包下12345678package io.dcloud;/** * 本文件是5+SDK使用的资源索引 * 工程引入本文件的包名必须是“io.dcloud” * */public class RInformation extends PdrR &#123; public static int VIEW_LAYOUT_SPLASH = 0;&#125; 5. 添加Web应用资源到工程 在assets目录下创建apps/[appid]/www目录，将web应用拷贝到www目录下，[appid]为Web应用mainfest.json文件id节点的内容。 修改src/main/assets/data/dcloud_control.xml文件，修改app节点的appid属性和appver属性的值。appid属性填写Web应用的mainfest.json文件的ID节点内容，appver属性填写manifest.json文件的version节点下的name节点的内容。 6. 插件开发这里以发送短信验证码为例，创建SendMsg.java12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package io.watasi;import android.content.Context;import android.os.Bundle;import android.util.Log;import org.json.JSONArray;import cn.smssdk.EventHandler;import cn.smssdk.OnSendMessageHandler;import cn.smssdk.SMSSDK;import io.dcloud.common.DHInterface.IWebview;import io.dcloud.common.DHInterface.StandardFeature;import io.dcloud.common.util.JSUtil;public class SendMsg extends StandardFeature &#123; public void onStart(Context pContext, Bundle pSavedInstanceState, String[] pRuntimeArgs) &#123; initSDK(); &#125; public static void initSDK() &#123; // 创建EventHandler对象 EventHandler eventHandler = new EventHandler() &#123; @Override public void afterEvent(int event, int result, Object data) &#123; if (result == SMSSDK.RESULT_COMPLETE) &#123; //回调完成 if (event == SMSSDK.EVENT_SUBMIT_VERIFICATION_CODE) &#123; //提交验证码成功 &#125; else if (event == SMSSDK.EVENT_GET_VERIFICATION_CODE) &#123; //获取验证码成功 &#125; else if (event == SMSSDK.EVENT_GET_SUPPORTED_COUNTRIES) &#123; //返回支持发送验证码的国家列表 &#125; &#125; else &#123; ((Throwable) data).printStackTrace(); &#125; &#125; &#125;; // 注册监听器 SMSSDK.registerEventHandler(eventHandler); &#125; public void send(final IWebview pWebview, JSONArray array)&#123; final String CallBackID = array.optString(0); String tel = array.optString(1); SMSSDK.getVerificationCode(\"86\", tel, new OnSendMessageHandler() &#123; @Override public boolean onSendMessage(String s, String s1) &#123; JSUtil.execCallback(pWebview, CallBackID, \"登录成功\", JSUtil.OK, false); return false; &#125; &#125;); &#125;&#125; 注意：插件编写完成后，一定要在assets/data/dcloud_properties.xml文件中声明插件类别名和Native层扩展插件类的对应关系123456789101112&lt;properties&gt; &lt;features&gt; &lt;!--name为类名， value为类所在的路径--&gt; &lt;feature name=&quot;SendMsg&quot; value=&quot;io.watasi.SendMsg&quot; /&gt; &lt;/features&gt; &lt;services&gt; &lt;service name=&quot;push&quot; value=&quot;io.dcloud.feature.aps.APSFeatureImpl&quot;/&gt; &lt;service name=&quot;Statistic&quot; value=&quot;io.dcloud.feature.statistics.StatisticsBootImpl&quot;/&gt; &lt;service name=&quot;Downloader&quot; value=&quot;io.dcloud.net.DownloaderBootImpl&quot;/&gt; &lt;/services&gt;&lt;/properties&gt; 7. 编写插件JS API &amp;&amp; 调用JS API7.1 编写API1234567891011121314151617181920document.addEventListener(\"plusready\", function() &#123; // 声明的JS“扩展插件别名” var _BARCODE = 'SendMsg', // 与dcloud_properties.xml中声明插件类别名相同 B = window.plus.bridge; window.plus.sendMsg = &#123; send: function(phone, successCallback, errorCallback) &#123; var success = typeof successCallback !== 'function' ? null : function(args) &#123; successCallback(args); &#125;; var fail = typeof errorCallback !== 'function' ? null : function(code) &#123; errorCallback(code); &#125;; callbackID = B.callbackId(success, fail); // 第二个参数与原生android实现的方法名相同 return B.exec(_BARCODE, \"send\", [callbackID, phone]); &#125; &#125;&#125;, true); 7.2 页面调用12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no\" /&gt; &lt;title&gt;&lt;/title&gt; &lt;link href=\"css/mui.min.css\" rel=\"stylesheet\"/&gt; &lt;style type=\"text/css\"&gt; .mt20&#123;margin-top: 20px;&#125; .btn-wrapper&#123;padding: 0 15px;&#125; .btn-wrapper button &#123;padding: 10px 0;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;header class=\"mui-bar mui-bar-nav\"&gt; &lt;h1 class=\"mui-title\"&gt;登录&lt;/h1&gt; &lt;/header&gt; &lt;div class=\"mui-content\"&gt; &lt;form class=\"mui-input-group mt20\"&gt; &lt;div class=\"mui-input-row\"&gt; &lt;input type=\"tel\" class=\"phone\" class=\"mui-input-clear\" placeholder=\"请输入手机号\"&gt; &lt;/div&gt; &lt;div class=\"mui-input-row\"&gt; &lt;input type=\"number\" class=\"code\" class=\"mui-input-clear\" placeholder=\"验证码\"&gt; &lt;/div&gt; &lt;/form&gt; &lt;div class=\"btn-wrapper\"&gt; &lt;button id=\"sendCode\" class=\"mui-btn mui-btn-block mui-btn-primary mt20\"&gt;发送验证码&lt;/button&gt; &lt;button class=\"mui-btn mui-btn-block mui-btn-danger\"&gt;登录&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;script src=\"js/mui.min.js\"&gt;&lt;/script&gt; &lt;script src=\"plugs/sendMsg.js\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\"&gt; mui.init(); document.querySelector(\"#sendCode\").addEventListener(\"tap\", function() &#123; var phone = document.querySelector(\".phone\").value; plus.sendMsg.send(phone, function()&#123;&#125;, function()&#123;&#125;) ; &#125;, false); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","categories":[],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://watasi.cn/tags/nodejs/"},{"name":"iis","slug":"iis","permalink":"http://watasi.cn/tags/iis/"}]},{"title":"基于MUI开发的一套模板","slug":"基于MUI开发的一套模板","date":"2017-08-01T00:28:18.781Z","updated":"2017-08-01T00:52:17.451Z","comments":true,"path":"2017/08/01/基于MUI开发的一套模板/","link":"","permalink":"http://watasi.cn/2017/08/01/基于MUI开发的一套模板/","excerpt":"","text":"项目介绍公司准备用MUI框架，开发一套模板，方便于未来进行二次、三次开发。本人本着绝对服从领导指示的原则，参与了模板的开发，这里把项目开源一下。该项目目前功能不是很完善(至少提交App Store被批为无用的爱啪啪)，后续会添加更多的功能。戳这里查看项目源码。 目录结构12345678910111213141516171819202122232425262728|-default 页面资源 |-css 样式表 |-css sass编译后的css |-sass sass源码 |-iconfont 字体图标 |-images 图片资源 |-js 页面js文件|-Public 公共资源 |-css 公共css |-images 公共图片资源 |-js 公共js文件 |-plugins 插件|-.project HBuilder编辑器生成文件|-manifest.json app配置文件|-abotut.html 关于我们|-detail.html 详情|-editor.html 编辑|-forget_password.html 找回密码|-home.html 主页|-index.html 入口|-login.html 登录|-personal.html 个人|-preview.html 预览|-publish.html 发布选项|-reg.html 注册|-release.html 发布|-setting.html 设置|-userinfo.html 个人信息 技术栈 主要用到的就是MUI 数据渲染的部分使用了vue1.0.28 功能[x] 注册[x] 登录[x] 发布文章[x] 浏览文章","categories":[{"name":"mui","slug":"mui","permalink":"http://watasi.cn/categories/mui/"}],"tags":[]},{"title":"iis7托管nodejs应用程序","slug":"iis7托管nodejs应用程序","date":"2017-07-29T06:36:22.229Z","updated":"2017-07-31T00:43:13.541Z","comments":true,"path":"2017/07/29/iis7托管nodejs应用程序/","link":"","permalink":"http://watasi.cn/2017/07/29/iis7托管nodejs应用程序/","excerpt":"","text":"1. 参考资料http://www.jb51.net/article/61569.htmhttp://www.cnblogs.com/chenweixuan/p/5489343.html 2. 开始NodeJsURL Rewriteiisnodeiisnode x86下载iisnode x64下载 安装完成后，在IIS中创建站点，指向nodejs应用程序目录(这里以express项目为例)，在nodejs应用程序中添加web.config文件： 123456789101112131415&lt;configuration&gt; &lt;system.webServer&gt; &lt;handlers&gt; &lt;add name=&quot;iisnode&quot; path=&quot;start.js&quot; verb=&quot;*&quot; modules=&quot;iisnode&quot; resourceType=&quot;Unspecified&quot; requireAccess=&quot;Script&quot; /&gt; &lt;/handlers&gt; &lt;rewrite&gt; &lt;rules&gt; &lt;rule name=&quot;all&quot;&gt; &lt;match url=&quot;/*&quot; /&gt; &lt;action type=&quot;Rewrite&quot; url=&quot;start.js&quot; /&gt; &lt;/rule&gt; &lt;/rules&gt; &lt;/rewrite&gt; &lt;/system.webServer&gt;&lt;/configuration&gt; 注意： 及 start.js文件 12#!/usr/bin/env noderequire(&apos;./bin/www&apos;);","categories":[],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://watasi.cn/tags/nodejs/"},{"name":"iis","slug":"iis","permalink":"http://watasi.cn/tags/iis/"}]},{"title":"mui监测IOS版本更新","slug":"mui监测IOS版本更新","date":"2017-07-29T05:57:23.316Z","updated":"2017-07-29T05:59:24.499Z","comments":true,"path":"2017/07/29/mui监测IOS版本更新/","link":"","permalink":"http://watasi.cn/2017/07/29/mui监测IOS版本更新/","excerpt":"","text":"使用mui开发混合app，上架app stroe后，监测app store是否有更新，并提示用户跳转app store更新应用。123456789101112131415161718192021222324252627282930var ver; // 用于保存当前应用版本mui.plusReady(function()&#123; plus.runtime.getProperty(plus.runtime.appid, function(inf) &#123; ver = inf.version; // 当前应用版本 var ua = navigator.userAgent.toLowerCase(); if(/iphone|ipad|ipod/.test(ua)) &#123; // iphone mui.ajax(&#123; url: 'http://itunes.apple.com/lookup?id=1166765111', type: \"GET\", dataType: \"json\", data: &#123; id: 1166765111 &#125;, contentType:'application/x-www-form-urlencoded;charset=UTF-8', success: function(res)&#123; //console.log(JSON.stringify(res)); var version = res.results[0].version; if(version &gt; ver) &#123; mui.alert(res.results[0].releaseNotes, \"版本更新\", \"确定\", function() &#123; var url = 'itms-apps://itunes.apple.com/us/app/id1166765111'; plus.runtime.openURL(url); &#125;) &#125; &#125; &#125;) &#125; &#125;);&#125;);","categories":[],"tags":[{"name":"mui","slug":"mui","permalink":"http://watasi.cn/tags/mui/"}]},{"title":"Nodejs使用request以流的形式转发图片","slug":"Nodejs使用request以流的形式转发图片","date":"2017-07-29T02:55:12.404Z","updated":"2017-07-29T05:51:26.283Z","comments":true,"path":"2017/07/29/Nodejs使用request以流的形式转发图片/","link":"","permalink":"http://watasi.cn/2017/07/29/Nodejs使用request以流的形式转发图片/","excerpt":"","text":"做项目的时候，需要用Nodejs做代理转发，服务器那边要求图片以流的方式上传，这里记录一下Nodejs以流的形式读取本地图片并上传。 1. 安装依赖1npm install request md5 2. 需要模块1234const fs = require(\"fs\");const path = require(\"path\");const request = require(\"request\");const md5 = require(\"md5\"); 3. 具体操作1234567891011121314151617181920212223242526272829// 获取前台穿过来到图片base64信息let img = req.body.img;// 去掉base64头部let base64Data = img.replace(/^data:image\\/\\w+;base64,/, \"\");// 转换成二进制let buffer = new Buffer(base64Data, \"base64\");// 生成图片md5值let md5Data = md5(buffer);// 保存图片fs.writeFile(path.join(__dirname+\"/../uploads\", `$&#123;md5Data&#125;.jpg`), buffer, (err) =&gt; &#123; if(err) &#123; console.log(err); return; &#125; // 读取图片 fs.createReadStream(path.join(__dirname+`/../uploads/$&#123;md5Data&#125;.jpg`)).pipe(request(&#123; url: url, method: \"POST\", headers: &#123; \"Content-Type\": \"application/json\" &#125; ... &#125;, (error, response, body) =&gt; &#123; console.log(body); &#125;));&#125;)","categories":[],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://watasi.cn/tags/nodejs/"}]}]}